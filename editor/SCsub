#!/usr/bin/env python

Import("env")

env.editor_sources = []

import os
import os.path
import glob
import editor_builders


def _make_doc_data_class_path(to_path):
    return

if env["tools"]:
    # Register exporters
    reg_exporters_inc = '#include "register_exporters.h"\n'
    reg_exporters = "void register_exporters() {\n"
    for e in env.platform_exporters:
        env.add_source_files(env.editor_sources, "#platform/" + e + "/export/export.cpp")
        reg_exporters += "\tregister_" + e + "_exporter();\n"
        reg_exporters_inc += '#include "platform/' + e + '/export/export.h"\n'
    reg_exporters += "}\n"

    # Core API documentation.
    docs = []
    docs += Glob("#doc/classes/*.xml")

    # Module API documentation.
    module_dirs = []
    for d in env.doc_class_path.values():
        if d not in module_dirs:
            module_dirs.append(d)

    for d in module_dirs:
        if not os.path.isabs(d):
            docs += Glob("#" + d + "/*.xml")  # Built-in.
        else:
            docs += Glob(d + "/*.xml")  # Custom.

    _make_doc_data_class_path(os.path.join(env.Dir("#").abspath, "editor"))

    docs = sorted(docs)
    env.Depends("#editor/doc_data_compressed.gen.h", docs)
    env.Depends(
        "#editor/doc_data_compressed.gen.h",
        docs
    )

    path = env.Dir(".").abspath

    # Editor translations
    tlist = glob.glob(path + "/translations/*.po")
    env.Depends("#editor/editor_translations.gen.h", tlist)
    env.Depends(
        "#editor/editor_translations.gen.h",
        tlist
    )

    # Documentation translations
    tlist = glob.glob(env.Dir("#doc").abspath + "/translations/*.po")
    env.Depends("#editor/doc_translations.gen.h", tlist)
    env.Depends(
        "#editor/doc_translations.gen.h",
        tlist
    )

    # Fonts
    flist = glob.glob(path + "/../thirdparty/fonts/*.ttf")
    flist.extend(glob.glob(path + "/../thirdparty/fonts/*.otf"))
    flist.sort()
    env.Depends("#editor/builtin_fonts.gen.h", flist)
    env.Depends(
        "#editor/builtin_fonts.gen.h",
        flist
    )

    env.add_source_files(env.editor_sources, "*.cpp")

    SConscript("debugger/SCsub")
    SConscript("fileserver/SCsub")
    SConscript("icons/SCsub")
    SConscript("import/SCsub")
    SConscript("plugins/SCsub")

    lib = env.add_library("editor", env.editor_sources)
    env.Prepend(LIBS=[lib])
